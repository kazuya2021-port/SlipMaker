#include "funcs_unit.jsx"#include "funcs_txtobj.jsx"/* MakeInfo={    isPre:false,     isAfter:false,     isTitleMulti:false,    isPreMulti:false,    isAfterMulti:false,    isEijiTitle:false};*/// 指定サイズに納まるように級数を決めるfunction decideMainQ(txt, max, def, isYoko){    var Q = def;    var diffSize;    var orgHeight;    var txtObj = makeTextSingle(txt, Q, isYoko);    orgHeight = txtObj.height;        if(orgHeight!=max){        if(orgHeight > (max-0.6)){            txtObj.remove();            Q-=0.3;                        txtObj = makeTextSingle(txt, Q, isYoko);            tmpH = txtObj.height;            diffSize = orgHeight - tmpH; // -0.3Qの差分                        var targetSho = ((orgHeight - (max-0.6)) / diffSize).toFixed (1);            Q -= (0.3 * targetSho);        }    }    txtObj.remove();    txtObj = makeTextSingle(txt, Q, isYoko);    var resltHeight=txtObj.height;    txtObj.remove();    if(resltHeight>max){        Q=decideMainQ(txt,max,Q,isYoko);    }    return Q;}function calcTotalW(titleQ, subQ, space, dic){    var total=0;        if(dic.isPre&&dic.isAfter){        total = mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(titleQ))+space+mmToPt(Qtomm(subQ));    }    else if(dic.isPre){        if(dic.isTitleMulti && dic.isPreMulti){            var henbai = titleQ * henbaiRitu;            total = mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(henbai ))+space+mmToPt(Qtomm(henbai));        }        else if(dic.isTitleMulti) total = mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(titleQ))+space+mmToPt(Qtomm(titleQ));        else if(dic.isPreMulti)  total = mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(titleQ));        else                          total = mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(titleQ));    }    else if(dic.isAfter){        if(dic.isTitleMulti && dic.isAfterMulti){            var henbai = titleQ * henbaiRitu;            total = mmToPt(Qtomm(henbai))+space+mmToPt(Qtomm(henbai))+space+mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(subQ));        }        else if(dic.isTitleMulti)  total = mmToPt(Qtomm(titleQ))+space+mmToPt(Qtomm(titleQ))+space+mmToPt(Qtomm(subQ));        else if(dic.isAfterMulti) total = mmToPt(Qtomm(titleQ))+space+mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(subQ));        else                          total = mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(titleQ));    }    else{ // サブなし        if(dic.isTitleMulti) total = mmToPt(Qtomm(titleQ))+space+mmToPt(Qtomm(titleQ));        else total = mmToPt(Qtomm(titleQ));    }        return total;}function calcTitleW(titleQ, space, dic){    var total=0;    if(dic.isTitleMulti){        if(dic.isPreMulti || dic.isAfterMulti){            var henbai = titleQ * henbaiRitu;            total = mmToPt(Qtomm(henbai ))+mmToPt(Qtomm(henbai));        }        else{            total = mmToPt(Qtomm(titleQ ))+mmToPt(Qtomm(titleQ));        }    }    else{        total = mmToPt(Qtomm(titleQ))    }    if(dic.isPre&&dic.isAfter){ // 前、タイトル、後        if(dic.isTitleMulti || dic.isPreMulti || dic.isAfterMulti){            var henbai = titleQ * henbaiRitu;            total = mmToPt(Qtomm(henbai ))+mmToPt(Qtomm(henbai));            total+=(space*2);        }else{            total+=(space*2);        }    }    else if(dic.isTitleMulti && (dic.isPreMulti || dic.isAfterMulti)){ // サブ、タイトル二行        total+=space;    }    else if(dic.isTitleMulti){        total+=space;    }    return total;}function calcSubW(subQ, space, dic){    var total=0;    if(!dic.isPre && !dic.isAfter) return 0;    if(dic.isPre && dic.isAfter){        if(dic.isPreMulti || dic.isAfterMulti){            total = mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(subQ));        }        else{            total = mmToPt(Qtomm(subQ))+space+mmToPt(Qtomm(subQ));        }    }    else{        if(dic.isPreMulti || dic.isAfterMulti){            total = mmToPt(Qtomm(subQ))+mmToPt(Qtomm(subQ));        }        else{            total = mmToPt(Qtomm(subQ));        }        if(dic.isTitleMulti && (dic.isPreMulti || dic.isAfterMulti)){ // サブ、タイトル二行            total+=space;        }        else if(dic.isPreMulti || dic.isAfterMulti){            total+=space;        }    }    return total;}function calcMaxWide(max,dic){    var maxTitle=0;    var maxSub=0;    if(!dic.isPre && !dic.isAfter){        maxTitle=max;        maxSub=0;    }    else if(dic.isPre&&dic.isAfter){ // 前、タイトル、後        maxTitle = max * (4.5/10);        maxSub = max * (5.5/10);    }    else if(dic.isTitleMulti && (dic.isPreMulti || dic.isAfterMulti)){ // サブ、タイトル二行        maxTitle = max/2;        maxSub = max/2;    }    else if(dic.isTitleMulti){        maxTitle = max * (6/10);        maxSub = max * (4/10);    }    else if(dic.isPreMulti || dic.isAfterMulti){        maxTitle = max * (4/10);        maxSub = max * (6/10);    }    else{        maxTitle = max * (6/10);        maxSub = max * (4/10);       }    return {maxTitle:maxTitle, maxSub:maxSub}}// サブQを決めるfunction decideTotalQ(titleQ, subQ, max, space, dic){    var tmpTitleQ = titleQ;    var tmpSubQ = subQ;    var totalMake = 0;    var titleWidth = calcTitleW (tmpTitleQ, space, dic);    var subWidth = calcSubW (tmpSubQ, space, dic);        var Ws = calcMaxWide(max, dic);    if(Ws.maxTitle < titleWidth){        while(1){            tmpTitleQ-=0.2;            titleWidth = calcTitleW (tmpTitleQ, space, dic);            if(titleWidth < Ws.maxTitle) break;        }    }    if((Ws.maxSub < subWidth) && Ws.maxSub!=0){        while(1){            tmpSubQ-=0.2;            subWidth = calcSubW (tmpSubQ, space, dic);            if(subWidth < Ws.maxSub) break;        }    }    if(Ws.maxSub==0) totalMake= titleWidth;    else if(dic.isPre && dic.isAfter) totalMake= subWidth + titleWidth + subWidth;    else totalMake= subWidth + titleWidth;        if(totalMake>max){        tmpSubQ-=0.2;        tmpTitleQ-=0.2;    }    return [tmpTitleQ, tmpSubQ, totalMake];}function decideTotalQAuth(authQ, max, space, isMulti){    var tmpQ = authQ;    var totalMake;    if(isMulti)        totalMake = mmToPt(Qtomm(tmpQ))+space+mmToPt(Qtomm(tmpQ));    else        totalMake = mmToPt(Qtomm(tmpQ));    if(max < totalMake){        while(1){            tmpQ-=0.1;            if(isMulti)                totalMake = mmToPt(Qtomm(tmpQ))+space+mmToPt(Qtomm(tmpQ));            else                totalMake = mmToPt(Qtomm(tmpQ));            if(totalMake < max) break;        }    }    return [tmpQ, totalMake];}function adjustSubSize4(TitleObj, titleStrs, subStrs, subSizeQ, subSpace, isPre){    var titleStr = titleStrs[0] + '\n' + titleStrs[1];    var subStr = subStrs[0] + '\n' + subStrs[1];        if(isPre){        for(var i=0; i<subStr.length; i++){            targetChar = TitleObj.characters[i];            var leading = mmToPt(Qtomm(subSizeQ)) + subSpace;            targetChar.characterAttributes.leading = leading;             targetChar.characterAttributes.size = mmToPt(Qtomm(subSizeQ));        }        for(var i=(TitleObj.characters.length - (titleStr.length-1)); i<TitleObj.characters.length; i++){            targetChar = TitleObj.characters[i];            targetChar.characterAttributes.horizontalScale = henbaiRitu*100;        }    }    else{        for(var i=0; i<titleStr.length; i++){            targetChar = TitleObj.characters[i];            targetChar.characterAttributes.horizontalScale = henbaiRitu*100;        }        for(var i=(TitleObj.characters.length - subStr.length); i<TitleObj.characters.length; i++){            targetChar = TitleObj.characters[i];            var leading = mmToPt(Qtomm(subSizeQ)) + subSpace;            targetChar.characterAttributes.leading = leading;             targetChar.characterAttributes.size = mmToPt(Qtomm(subSizeQ));        }    }}function adjustSubSize(TitleObj, afterStr, sizeQ, space){    for(var i=(TitleObj.characters.length - afterStr.length); i<TitleObj.characters.length; i++){        targetChar = TitleObj.characters[i];        var leading = mmToPt(Qtomm(sizeQ)) + space;        targetChar.characterAttributes.leading = leading;         targetChar.characterAttributes.size = mmToPt(Qtomm(sizeQ));    }}//矩形であることを前提としたエリアテキストを内容に合わせて全部見せるfunction expandAreaText( textFrame ){	//mmからpointに変換するための値	var mm = 2.834645;		//エリアテキスト以外は処理しない	if ( textFrame.kind != TextType.AREATEXT ) return;		while ( checkOverflowTextArea(textFrame) )	{		//1行目の下座標		var top = textFrame.top - textFrame.lines[ 0 ].leading;				//座標を下方向に伸ばす		var array = [];		for ( var i=0; i<textFrame.textPath.pathPoints.length; i++ )		{			var anchor = textFrame.textPath.pathPoints[i].anchor;			if ( anchor[1] < top )			{				anchor[1] -= 1 * mm;			}			array.push( anchor );		}		textFrame.textPath.setEntirePath ( array );		array = null;	}}function fitAreaTextWidth( textFrame , isYoko){    if(checkOverflowTextArea(textFrame))        expandAreaText(textFrame);        var offsetW=999;    var maxH=0;    var totalWidth=0;    for(var l=0; l < textFrame.lines.length; l++){        var range = textFrame.lines[l];        var lineHeight=0;        var isTateYoko=false;        for(var i=0; i<range.contents.length; i++){            var targetChar = range.characters[i];            if(targetChar.baselineDirection==BaselineDirectionType.TateChuYoko){                if(!isTateYoko)lineHeight+=targetChar.size;                isTateYoko=true;            }            else isTateYoko=false;                        if(targetChar.contents.match(/\s/)){                lineHeight+=(targetChar.size/2);            }            else if(!isTateYoko){                lineHeight+=targetChar.size;            }        }        if(maxH < lineHeight){            maxH = lineHeight;        }        var space = range.leading - range.size;        totalWidth+=range.size+space;        if(l==(textFrame.lines.length - 1))totalWidth-=space;    }    maxH *= -1;    var lastline = textFrame.lines[ textFrame.lines.length - 1 ];    var ofst = totalWidth - textFrame.width;    var array = [];    for ( var i=0; i<textFrame.textPath.pathPoints.length; i++ )    {        var anchor = textFrame.textPath.pathPoints[i].anchor;        if ( anchor[0] == 0 || ((anchor[0] < 1) && (anchor[0] > 0)) || ((anchor[0] > -1) && (anchor[0] < 0))){            anchor[0] -= ofst;        }        if( anchor[1] < maxH){            anchor[1] = maxH;        }        array.push( anchor );    }    textFrame.textPath.setEntirePath ( array );    array = null;        textFrame.translate(ofst,0);}function checkOverflowTextArea ( textFrame ){	//全体の文字数	var paragraphCharCount = 0;	for ( var i=0; i < textFrame.paragraphs.length; i++ )	{		paragraphCharCount +=textFrame.paragraphs[i].characters.length;	}	//見えている文字数をカウント	var visibleCharCount = 0;	for ( var i=0; i < textFrame.lines.length; i++ )	{		visibleCharCount +=textFrame.lines[i].characters.length;	}	//textFrame内のすべての文字数と比較して、異なればあふれている	return paragraphCharCount != visibleCharCount;}