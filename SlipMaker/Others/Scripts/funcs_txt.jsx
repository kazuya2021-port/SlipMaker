#include "tiny_segmenter-0.2.js"function isOverText(str,weight){    var totalWeight=0;    var sptTxt=str.split('');    var isTateyoko=false;    for(i=0;i<sptTxt.length;i++){        if(isZenkaku(sptTxt[i])){            totalWeight+=2;            isTateyoko = false;        }        else if(isTateyoko){        }        else if(sptTxt[i].match(/[0-9]|[a-z]|\!|\?/i) && isTateyoko==false){            isTateyoko=true;            totalWeight+=2;        } else{            isTateyoko = false;            totalWeight+=1;        }    }/*    for(i=0;i<sptTxt.length;i++){        if(isZenkaku(sptTxt[i]))totalWeight+=2;        else totalWeight+=1;    }*/    if(totalWeight >= weight) return true;    else return false;}// 長い文字列を、真ん中あたりの単語を境に分割function splitTextString(str){    var segmenter = new TinySegmenter();     var segs = segmenter.segment(str);    var line1;    var line2;    var isLast = false;    var tmpLine = "";    var borderCount=str.length/2;    var wordCount=0;    for(var i = 0; i < segs.length; i++){        tmpLine = tmpLine + segs[i];        if((tmpLine.length>=borderCount) && !isLast){            line1 = tmpLine;            tmpLine = "";            isLast = true;        }    }    line2 = tmpLine;    return [line1,line2];}function splitText(str){    var segmenter = new TinySegmenter();     var segs = segmenter.segment(str);    var line1;    var line2;    var isLast = false;    var tmpLine = "";    var totalWeight=0;    var sptTxt=str.split('');    var isTateyoko=false;    for(i=0;i<sptTxt.length;i++){        if(isZenkaku(sptTxt[i])){            totalWeight+=2;            isTateyoko = false;        }        else if(isTateyoko){        }        else if(sptTxt[i].match(/[0-9]|[a-z]|\!|\?/i) && isTateyoko==false){            isTateyoko=true;            totalWeight+=2;        } else{            isTateyoko = false;            totalWeight+=1;        }    }    var borderWeight=totalWeight/2;    var weightCount=0;    for(var i = 0; i < segs.length; i++){        tmpLine = tmpLine + segs[i];        var segLength = 0;        var sptSeg=segs[i].split('');        for(var t=0; t<sptSeg.length;t++){            if(isZenkaku(sptSeg[t]))segLength+=2;            else segLength+=1;        }        weightCount+=segLength;        if((weightCount>=borderWeight) && !isLast){            line1 = tmpLine;            tmpLine = "";            isLast = true;        }    }    line2 = tmpLine;    sptTxt=line1.split('');    var lastc = sptTxt[line1.length-1];    if(lastc=='-'){        line1 =line1.substr( 0, line1.length-2 );        line2 = '-' + line2;    }    return [line1,line2];}// ローマ数字を含むか？含む場合は該当文字を返すfunction searchRoman(str){    var pattern = /(M{1,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})|M{0,4}(CM|C?D|D?C{1,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})|M{0,4}(CM|CD|D?C{0,3})(XC|X?L|L?X{1,3})(IX|IV|V?I{0,3})|M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|I?V|V?I{1,3}))/;    var m = str.match(pattern);    var retStr="";    if(m){        for(var i=0; i<m.length;i++){            if(m[i]!=undefined && m[i]!=''){                retStr = m[i];                break;            }        }    }    return retStr;}function checkParlenNum(str){    var tmpStr = str;    var parlen=null;    parlen = str.match(/\((.+)\)/); // パーレンの文字    if(parlen!=null){        if(parlen[1].match(/[Ⅰ-Ⅻ]/)){            tmpStr=str.replace (parlen[0],"");        }else{            var isNum = getRomanInfo(parlen[1]);            if(isNum.length != 0){                tmpStr=str.replace (parlen[0],"");            }        }    }    return tmpStr;}// パーレン内の文字が数字の場合、パーレン削除function trimParlen(str){    var tmpStr = str;    var parlen=null;    parlen = str.match(/\((.+)\)/); // パーレンの文字    if(parlen!=null){        if(parlen[1].match(/[Ⅰ-Ⅻ]/)){            tmpStr=str.replace (parlen[0],parlen[1]);        }else{            var isNum = getRomanInfo(parlen[1]);            if(isNum.length != 0){                tmpStr=str.replace (parlen[0],parlen[1]);            }            else if(isKansuji(parlen[1])){                tmpStr=str.replace (parlen[0],parlen[1]);            }        }    }    return tmpStr;}function isKansuji(n) {    var base = ["〇", "一", "二", "三","四","五","六","七","八","九","十"];    for(var i=0; i<n.length; i++){        var c = n.charAt (i);        var isKanji=false;        for(var j=0;j<base.length;j++){            if(base[j]==c){                isKanji=true;                break;            }        }    }    return isKanji;}function getRomanInfo(str){    var retObj;    var romanInfo=null;    var tmpStr=str;    var romanVal = searchRoman(str);    if(romanVal!=""){        tmpStr = str.replace(romanVal,'');        var romanPos = str.search(romanVal);        romanInfo={ pos:romanPos, length:romanVal.length, str:romanVal };    }    retObj = (romanInfo!=null)?[tmpStr,romanInfo]:[tmpStr];    return retObj;}// true 全角 false 半角function isZenkaku(input) {    if((input.match(/^[^\x01-\x7E\xA1-\xDF]+$/)) || // 全角文字（ひらがな・カタカナ・漢字 etc.）        (input.match(/^[\u3041-\u3096]+$/)) ||          // 全角ひらがな        (input.match(/^[\u30a1-\u30f6]+$/))){            // 全角カタカナ            if(input=="、" || input=="。") return false;            return true;        }    else if (input.match(/^[0-9a-zA-Z]+$/)){        return false;    }    return false;}function trimStr(str){    return str.replace (/^\s+|\s+$/g, '');}function distinctArray(ar) {    var ar2 = [];    var flag=true;    ar2.push(ar[0]);    for(var i = 0; i < ar.length; i++){        flag = true;        for(var j = 0; j < ar2.length; j++){            if(ar[i] === ar2[j]){                flag = false;            }        }        if(flag){            ar2.push(ar[i]);        }    }    return ar2;}function getSplitAuth(str){    var s = str.split(',');    if(s.length==1){ // カンマ区切りになっていない        var newStr=[];        //作:L·フランク･ボーム 編訳:中村 航 絵:okama 監修:坪田信貴        var yakuAll = str.match(/\s[^\x01-\x7E\xA1-\xDF]+(?=:)/g);        if(yakuAll){            var dyakuAll=distinctArray(yakuAll);            for(i=0;i<dyakuAll.length;i++){                var yaku = yakuAll[i];                str = str.replace (yaku, yaku.replace (yaku.match(/^\s/), ','));            }            return getSplitAuth(str);        }        else{            var spcs = str.match(/\s/);            if(spcs){                for(i=0;i<spcs.length;i++){                    str = str.replace (spcs[i], ' ');                }            }            return str;        }            }    else    {        var newAuths=[];        var s = str.split(',');        var ma = str.match(/[^\x01-\x7E\xA1-\xDF]+(?=:)/g);        var m=distinctArray(ma);        if(ma.length == s.length){                        for(i=0;i<m.length;i++){                var tmp="";                var yaku = m[i];                var names=[];                for(j=0;j<s.length;j++){                    if(s[j].search (yaku)!=-1)                        names.push(s[j].replace(yaku+':',''));                }                tmp+=yaku+":";                for(j=0;j<names.length;j++){                    tmp=(j!=names.length-1)?tmp+names[j]+"・":tmp+names[j]+" ";                }                tmp=trimStr(tmp);                newAuths.push(tmp);            }            return newAuths;        }        else{            var curyaku;            var auths="";            for(i=0;i<s.length;i++){                var tmp = s[i].match(/[^\x01-\x7E\xA1-\xDF]+(?=:)/g);                if(tmp==null){                    auths += (i!=s.length-1)?curyaku+":"+s[i]+",":curyaku+":"+s[i];                }                else{                    curyaku = tmp;                    auths += (i!=s.length-1)?s[i]+",":s[i];                }            }            s = auths.split(',');            ma = auths.match(/[^\x01-\x7E\xA1-\xDF]+(?=:)/g);            m=distinctArray(ma);            if(ma.length == s.length){                            for(i=0;i<m.length;i++){                    var tmp="";                    var yaku = m[i];                    var names=[];                    for(j=0;j<s.length;j++){                        if(s[j].search (yaku)!=-1)                            names.push(s[j].replace(yaku+':',''));                    }                    tmp+=yaku+":";                    for(j=0;j<names.length;j++){                        tmp=(j!=names.length-1)?tmp+names[j]+"・":tmp+names[j]+" ";                    }                    tmp=trimStr(tmp);                    newAuths.push(tmp);                }                return newAuths;            }        }    }}// 著者の作り変え & 長ければ二行にfunction remakeAuthor(str){    var ret=[];    var newAuths=getSplitAuth(str);    var totalString="";        if((typeof newAuths) != "string"){        for(i=0;i<newAuths.length;i++){            totalString=(i!=newAuths.length-1)?totalString+newAuths[i]+" ":totalString+newAuths[i];        }    }    else{        totalString = newAuths;    }    if(isOverText (totalString, multiLineBorder_Auth)){        var line1="";        var line2="";        var isLast = false;        var tmpLine = "";        var totalWeight=0;        var sptTxt=str.split('');        for(i=0;i<sptTxt.length;i++){            if(isZenkaku(sptTxt[i]))totalWeight+=2;            else totalWeight+=1;        }        var borderWeight=totalWeight/2;        var weightCount=0;        for(var i = 0; i < newAuths.length; i++){            var segLength = 0;            var sptSeg=newAuths[i].split('');            for(var t=0; t<sptSeg.length;t++){                if(isZenkaku(sptSeg[t]))segLength+=2;                else segLength+=1;            }            weightCount+=segLength;            if((weightCount>=borderWeight) && !isLast){                line1 = trimStr(tmpLine);                tmpLine = "";                isLast = true;            }            tmpLine += newAuths[i] + ' ';        }        line2 = trimStr(tmpLine);        ret=[line1,line2];    }else{        ret=[trimStr(totalString)];    }    return ret;}